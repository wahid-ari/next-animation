import Head from 'next/head'
import Navbar from '@components/Navbar';
import React, { useRef } from 'react';
import { motion, useMotionValue, useTransform, useSpring } from 'framer-motion';
import useRaf from '@rooks/use-raf';
import chrome from '../public/icons/chrome.svg';
import docs from '../public/icons/docs.svg';
import excel from '../public/icons/excel.svg';
import gmail from '../public/icons/gmail.svg';
import spotify from '../public/icons/spotify.svg';
import Code from '@components/Code';
import Image from 'next/image';

const images = [chrome, docs, excel, gmail, spotify];

const baseWidth = 30;
const distanceLimit = baseWidth * 6;
const beyondTheDistanceLimit = distanceLimit + 1;
const distanceInput = [
  -distanceLimit,
  -distanceLimit / 1.25,
  -distanceLimit / 2,
  0,
  distanceLimit / 2,
  distanceLimit / 1.25,
  distanceLimit
];
const widthOutput = [
  baseWidth,
  baseWidth * 1.3,
  baseWidth * 1.5,
  baseWidth * 1.7,
  baseWidth * 1.5,
  baseWidth * 1.3,
  baseWidth
];

export default function Home() {
  const mouseX = useMotionValue(null);

  return (
    <>
      <Head>
        <title>Dock</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen pb-8 overflow-hidden">

        <Navbar />

        <div className="max-w-5xl px-4 mx-auto pt-4 ">
          <h1 className="dark:text-white text-2xl font-semibold mb-2">Dock</h1>

          <div className="flex justify-center">
            <div
              className="flex items-center bg-neutral-200/70 dark:bg-black/20 rounded-t p-4 h-11 gap-4 justify-center"
              onMouseMove={(event) => mouseX.set(event.nativeEvent.x)}
              onMouseLeave={() => mouseX.set(null)}
            >
              {images.map((image, index) => (
                <Img src={image} key={index} mouseX={mouseX} />
              ))}
            </div>
          </div>

          <Code code={`// https://codesandbox.io/s/great-morning-3m7rcd?file=/src/App.js
          
import React, { useRef } from 'react';
import { motion, useMotionValue, useTransform, useSpring } from 'framer-motion';
import useRaf from '@rooks/use-raf';
import chrome from '../public/icons/chrome.svg';
import docs from '../public/icons/docs.svg';
import excel from '../public/icons/excel.svg';
import gmail from '../public/icons/gmail.svg';
import spotify from '../public/icons/spotify.svg';
import Code from '@components/Code';
import Image from 'next/image';

const images = [chrome, docs, excel, gmail, spotify];

const baseWidth = 30;
const distanceLimit = baseWidth * 6;
const beyondTheDistanceLimit = distanceLimit + 1;
const distanceInput = [
  -distanceLimit,
  -distanceLimit / 1.25,
  -distanceLimit / 2,
  0,
  distanceLimit / 2,
  distanceLimit / 1.25,
  distanceLimit
];
const widthOutput = [
  baseWidth,
  baseWidth * 1.3,
  baseWidth * 1.5,
  baseWidth * 1.7,
  baseWidth * 1.5,
  baseWidth * 1.3,
  baseWidth
];

export default function Home() {
  const mouseX = useMotionValue(null);

  return (
    <div className="flex justify-center">
      <div
        className="flex items-center bg-neutral-200/70 dark:bg-black/20 rounded-t p-4 h-11 gap-4 justify-center"
        onMouseMove={(event) => mouseX.set(event.nativeEvent.x)}
        onMouseLeave={() => mouseX.set(null)}
      >
        {images.map((image, index) => (
          <Img src={image} key={index} mouseX={mouseX} />
        ))}
      </div>
    </div>
  )
}`} />

          <Code code={`function Img({ src, mouseX }) {
  const distance = useMotionValue(beyondTheDistanceLimit);
  const width = useSpring(useTransform(distance, distanceInput, widthOutput), {
    damping: 25,
    stiffness: 250
  });
  const ref = useRef();
  useRaf(() => {
    const el = ref.current;
    const mouseXVal = mouseX.get();
    if (el && mouseXVal !== null) {
      const rect = el.getBoundingClientRect();
      const imgCenterX = rect.left + rect.width / 2;
      const distanceDelta = mouseXVal - imgCenterX;
      distance.set(distanceDelta);
      return;
    }
    distance.set(beyondTheDistanceLimit);
  }, true);

  return (
    <motion.div ref={ref} style={{ width }} className="relative">
      <Image alt='icon' src={src} className="cursor-pointer -bottom-4 absolute" />
    </motion.div>
  )
}`} />

        </div>
      </main >
    </>

  )
}

function Img({ src, mouseX }) {
  const distance = useMotionValue(beyondTheDistanceLimit);
  const width = useSpring(useTransform(distance, distanceInput, widthOutput), {
    damping: 25,
    stiffness: 250
  });
  const ref = useRef();
  useRaf(() => {
    const el = ref.current;
    const mouseXVal = mouseX.get();
    if (el && mouseXVal !== null) {
      const rect = el.getBoundingClientRect();
      const imgCenterX = rect.left + rect.width / 2;
      const distanceDelta = mouseXVal - imgCenterX;
      distance.set(distanceDelta);
      return;
    }
    distance.set(beyondTheDistanceLimit);
  }, true);

  return (
    <motion.div ref={ref} style={{ width }} className="relative">
      <Image alt='icon' src={src} className="cursor-pointer -bottom-4 absolute" />
    </motion.div>
  )
}